# Electricity prices in Finland

```elixir
Mix.install([
  {:jason, "~> 1.3"},
  {:httpoison, "~> 1.8"},
  {:vega_lite, "~> 0.1.4"},
  {:kino_vega_lite, "~> 0.1.1"},
  {:kino, "~> 0.6.1"}
])

alias VegaLite, as: Vl
```

## Data fetching

Spot prices are fetched from my own service, built with Elixir Phoenix.

API provides following endpoints

* `/api/price/today` todays prices
* `/api/price/now` current hour price
* `/api/price/next_24hrs` prices on following 24hrs

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
{:ok, %HTTPoison.Response{status_code: 200, body: body}} =
  HTTPoison.get("https://spotti.fly.dev/api/price/next_24hrs")

price_data = Jason.decode!(body)
```

## Graph

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Vl.new(width: 800, height: 500, title: "Electricity prices today")
|> Vl.data_from_values(price_data)
|> Vl.layers([
  Vl.new()
  |> Vl.mark(:bar, width: 20, tooltip: true, corner_radius_end: 4)
  |> Vl.encode_field(:x, "date", type: :temporal, axis: [format: "%H"], title: "klo")
  |> Vl.encode_field(:y, "price", type: :quantitative, title: "c/kWh")
  |> Vl.encode_field(:theta, "price", type: :quantitative),
  Vl.new()
  |> Vl.mark(:rule)
  |> Vl.encode_field(
    :y,
    "price",
    type: :quantitative,
    aggregate: :mean
  )
  |> Vl.encode(:color, value: :orange)
  |> Vl.encode(:size, value: 3)
  |> Vl.encode(:stroke_dash, value: [6, 4])
  |> Vl.encode(:tooltip, value: "")
])
```

## Cheapest hours

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
price_data
|> Enum.sort_by(&Map.fetch!(&1, "price"))
|> Enum.take(5)
```

## Rank

Calculate rank based on price, chepeast hour has lowest rank

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
price_data
|> Enum.sort_by(&Map.fetch!(&1, "price"))
|> Enum.with_index(1)
|> Enum.sort_by(&Map.fetch!(elem(&1, 0), "date"))
|> Enum.map(fn {data, rank} -> Map.put_new(data, "rank", rank) end)
```

## Period of cheapest hours

```elixir
hours = Kino.Input.number("Period (hrs)", default: 3)
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
period = Kino.Input.read(hours)

price_data
|> Enum.with_index()
|> Enum.map(fn {data, index} ->
  next_items = Enum.slice(price_data, index..(index + period - 1))
  sum = next_items |> Enum.map(&Map.fetch!(&1, "price")) |> Enum.sum()
  avg_next_hrs = (sum / min(period, length(next_items))) |> Float.round(2)
  Map.put_new(data, "avg_next", avg_next_hrs)
end)
|> Enum.slice(0..(-period - 1))
```

value of avg_next means average price of next N hours
